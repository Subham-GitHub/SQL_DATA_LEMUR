-------------------------------------------------------------------------------------------------
                                   DIFFICULTY  ---  EASY 
-------------------------------------------------------------------------------------------------

1. Data Science Skills (Linkedin)

Given a table of candidates and their skills, you're tasked with finding the candidates best suited for an open Data Science job.
You want to find candidates who are proficient in Python, Tableau, and PostgreSQL.

Write a query to list the candidates who possess all of the required skills for the job. Sort the the output by candidate ID in ascending order.

Tables: candidates

::::SOLUTION::::
SELECT candidate_id  FROM candidates
WHERE skill IN ('Python','Tableau','PostgreSQL')
GROUP BY candidate_id
HAVING COUNT(skill)>=3
ORDER BY candidate_id;


2.Page With No Likes (Facebook)

Assume you are given the tables below about Facebook pages and page likes. Write a query to return the page IDs of all the Facebook pages that don't have any likes.
The output should be in ascending order.

Tables: pages, page_likes

::::SOLUTION::::
SELECT p.page_id FROM pages p
LEFT JOIN page_likes pl
ON p.page_id=pl.page_id
WHERE pl.liked_date is NULL
GROUP BY p.page_id;


3.Unfinished Parts (Tesla)

Tesla is investigating bottlenecks in their production, and they need your help to extract the relevant data.
Write a SQL query that determines which parts have begun the assembly process but are not yet finished.

Tables: parts_assembly

::::SOLUTION::::
SELECT part FROM parts_assembly
WHERE finish_date is NULL
GROUP BY part;


4.Laptop vs. Mobile Viewership (New York Times)

Assume that you are given the table below containing information on viewership by device type (where the three types are laptop, tablet, and phone).
Define “mobile” as the sum of tablet and phone viewership numbers. Write a query to compare the viewership on laptops versus mobile devices.

Output the total viewership for laptop and mobile devices in the format of "laptop_views" and "mobile_views".

Tables: viewership

::::SOLUTION::::

SELECT 
  SUM(CASE WHEN device_type='laptop' THEN 1 ELSE 0 END) AS laptop_views,
  SUM(CASE WHEN device_type='phone' OR device_type='tablet' THEN 1 ELSE 0 END) AS mobile_views
FROM viewership;

----/* OR */--------------------/* OR */---------------------/* OR */-------------------/* OR */----

SELECT 
  COUNT(CASE WHEN device_type='laptop' THEN 1 END) AS laptop_views,
  COUNT(CASE WHEN device_type='phone' OR device_type='tablet' THEN 1 END) AS mobile_views
FROM viewership;


5.Cities With Completed Trades (Robinhood)

You are given the tables below containing information on Robinhood trades and users. Write a query to list the top three cities that have the most completed trade orders in descending order.

Output the city and number of orders.

Tables: trades, users

::::SOLUTION::::
SELECT u.city, COUNT(t.order_id) AS Total_Orders 
FROM trades t
LEFT JOIN users u
ON t.user_id=u.user_id
where t.status='Completed'
GROUP BY u.city
ORDER BY Total_Orders DESC
LIMIT 3;


6.Duplicate Job Listings (LinkedIN)

Assume you are given the table below that shows job postings for all companies on the LinkedIn platform. Write a query to get the number of companies that have posted duplicate job listings.

Clarification:

Duplicate job listings refer to two jobs at the same company with the same title and description.

Tables: job_listings

::::SOLUTION::::
WITH CTE AS 
(SELECT
    ROW_NUMBER() OVER (
      PARTITION BY company_id, title, description 
    ) AS ranking, 
    company_id, 
    title, 
    description 
    FROM job_listings
)
SELECT SUM(DISTINCT ranking) as duplicate_companies FROM CTE;


7.Final Account Balance (Paypal)

Given a table of bank deposits and withdrawals, return the final balance for each account.

Assumption:

All the transactions performed for each account are present in the table; no transactions are missing.

Tables: transactions

::::SOLUTION::::
SELECT account_id,
SUM(CASE WHEN transaction_type='Deposit' THEN amount
     WHEN transaction_type='Withdrawal' THEN amount*(-1)
     ELSE 0
     END) AS final_balance
FROM transactions
GROUP BY account_id
ORDER BY account_id;



-------------------------------------------------------------------------------------------------
                                    DIFFICULTY  ---  MEDIUM 
-------------------------------------------------------------------------------------------------









-------------------------------------------------------------------------------------------------
                                    DIFFICULTY  ---  HARD
-------------------------------------------------------------------------------------------------























